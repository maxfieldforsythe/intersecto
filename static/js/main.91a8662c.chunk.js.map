{"version":3,"sources":["components/TopBar.js","components/SideBar.js","App.js","reportWebVitals.js","index.js"],"names":["TopBar","className","props","style","marginTop","color","height","width","background","onClick","computeButton","clearButton","App","previous","current","shapeCounter","shape1","shape2","notify","message","toast","drawPixel","x","y","ctx","document","getElementById","getContext","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","drawLine","x1","y1","JSON","stringify","length","console","log","initializeCanvas","canvas","offsetWidth","offsetHeight","useEffect","jsonData","axios","post","then","response","data","catch","error","theme","event","yCoord","pageY","target","offsetTop","xCoord","pageX","offsetLeft","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91a8662c.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function TopBar() {\n    return (\n        <div className=\"layout-topbar\">\n            INTERSECTO\n\t    </div>\n    )\n}\n","import React from 'react'\n\nexport default function TopBar(props) {\n    return (\n      <div className=\"layout-sidebar\">\n        <div style={{marginTop: '20px', color: '#fff'}}>\n          Menu/Tutorial\n        </div>\n        <div style={{height: '2px', width: '85%', background: '#fff'}}/>\n        <div className=\"sidebar-subtext\">\n          Welcome!<br/>\n          To begin placing shapes click on the canvas to the right. To close a shape click near the starting point. After the first shape is closed you can begin drawing the second one. \n          Feel free to clear the canvas to restart. The calculate button will tell you if they are intersecting.\n        </div>\n        <button className=\"buttons\" onClick={props.computeButton}>\n          Calculate\n        </button>\n        <button className=\"buttons\" onClick={props.clearButton}>\n          Clear Canvas\n        </button>\n      </div>\n    )\n}\n","import './App.css';\nimport axios from 'axios';\nimport React, {useState, useEffect} from 'react'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport TopBar from './components/TopBar';\nimport SideBar from './components/SideBar'\n\nfunction App() {\n\n  //Hooks are too slow to update so I used this isntead of state\n  let previous = []\n  let current = []\n  let shapeCounter = 1\n  let shape1 = []\n  let shape2 = []\n  let color = 'blue'\n\n  //Toast stuff\n  const notify = (message) => toast(message);\n  const deny = () => toast(\"Please close all shapes before calculating!\");\n\n  //Makes call to flask app for calculations\n  const computeIntersect=()=>{\n    var jsonData = {\n      'shape1': \n        shape1,\n      'shape2': \n        shape2\n    }\n\n    //If 2 shapes aren't fully formed notify user to finish them\n    if(shapeCounter != 3){\n      deny()\n      return\n    }\n    axios.post(`https://flask-container-service.82ruic243qqso.us-east-1.cs.amazonlightsail.com/intersects`, jsonData).then(response => {\n        if(response.data === 'True'){\n          notify(\"These shapes intersect!\")\n        } else {\n          notify(\"These shapes do not intersect :'(\")\n        }\n        console.log(\"SUCCESS\", response)\n      }).catch(error => {\n        console.log(error)\n      })\n  }\n  \n  //Canvas clock event that takes mouse coordinates and initiates drawing\n  const canvasClick=(event)=>{\n    let yCoord = event.pageY - event.target.offsetTop\n    let xCoord = event.pageX - event.target.offsetLeft\n\n    previous = current\n\n    current = [xCoord,yCoord]\n\n    //Updates current click to new coordinates and checks to see if you are within 20px of the start coordinate\n    //Closes shape and/or starts new shape\n    if(shapeCounter < 2){\n      if(shape1.length > 0){\n        if(xCoord < shape1[0][0][0] + 20 && xCoord > shape1[0][0][0] - 20 && yCoord < shape1[0][0][1] + 20 && yCoord > shape1[0][0][1] - 20 ){\n          current = [shape1[0][0][0],shape1[0][0][1]]\n        }\n      }\n    } else {\n      if(shape2.length > 0){\n        if(xCoord < shape2[0][0][0] + 20 && xCoord > shape2[0][0][0] - 20 && yCoord < shape2[0][0][1] + 20 && yCoord > shape2[0][0][1] - 20 ){\n          current = [shape2[0][0][0],shape2[0][0][1]]\n        }\n      }\n    }\n\n    //Pixel for tracking of initial point\n    if(shapeCounter < 3){\n      drawPixel(xCoord, yCoord);\n    }\n\n    //Draws line\n    if(previous.length > 0 && shapeCounter < 3){\n      drawLine(previous[0],current[0],previous[1],current[1])\n    }\n  }\n\n  const drawPixel=(x,y)=>{\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(x,y);\n    ctx.lineTo(x+1, y+1);\n    ctx.stroke();\n  }\n\n  //Canvas stuff to render lines\n  const drawLine=(x,x1,y,y1)=>{\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(x,y);\n    ctx.lineTo(x1, y1);\n    ctx.stroke();\n    if(shapeCounter < 2){\n      shape1 = [...shape1, [[x,y,0],[x1,y1,0]]]\n      if(JSON.stringify(shape1[shape1.length -1][1]) === JSON.stringify(shape1[0][0])){\n        shapeCounter++\n        previous = []\n        current = []\n        color = 'red'\n      }\n    } else {\n      shape2 = [...shape2, [[x,y,0],[x1,y1,0]]]\n      if(JSON.stringify(shape2[shape2.length -1][1]) === JSON.stringify(shape2[0][0])){\n        shapeCounter++\n        console.log(shape1)\n        console.log(shape2)\n      }\n    }\n  }\n\n  //Initialize and reset canvas\n  const initializeCanvas=()=> {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = canvas.offsetWidth\n    canvas.height = canvas.offsetHeight\n    previous = []\n    current = []\n    shape1 = []\n    shape2 = []\n    shapeCounter = 1\n    color = 'blue'\n  }\n\n  useEffect(() => {\n    initializeCanvas()\n  });\n\n  \n\n  return (\n    <div className=\"App\">\n      <TopBar/>\n      <SideBar computeButton={computeIntersect} clearButton={initializeCanvas}/>\n      <ToastContainer theme='dark'/>\n      <div className=\"graph-container\">\n        <div className=\"page\">\n          <div className=\"data-table\" onClick={canvasClick}>\n            <canvas\n              id=\"canvas\"\n              style={{width: '100%', height: '100%'}}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}